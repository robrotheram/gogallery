name: Fyne build

on:
  push:
    branches:    
      - '**'  

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CGO_ENABLED: 1

jobs:
  build:
    strategy:
    # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: 'gogallery'
            os: 'ubuntu-latest'
            goos: 'linux'
            goarch: 'amd64'
          - name: 'gogallery'
            os: 'windows-latest'
            goos: 'windows'
            goarch: 'amd64'
          - name: 'gogallery'
            os: 'macos-latest'
            goos: 'darwin'
            goarch: 'amd64'
          - name: 'gogallery'
            os: 'macos-latest'
            goos: 'darwin'
            goarch: 'arm64'

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Install Fyne dependencies (Ubuntu)
        if: matrix.build.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev libxkbcommon-dev

      - name: Install Fyne dependencies (macOS)
        if: matrix.build.os == 'macos-latest'
        run: |
          # macOS has the necessary frameworks built-in

      - name: Install Fyne CLI
        run: go install fyne.io/tools/cmd/fyne@latest

      - name: Build Fyne app
        env:
          GOOS: ${{ matrix.build.goos }}
          GOARCH: ${{ matrix.build.goarch }}
        shell: bash
        run: |
          go mod download
          
          # Set output name based on OS
          if [ "${{ matrix.build.goos }}" = "windows" ]; then
            OUTPUT_NAME="${{ matrix.build.name }}.exe"
          else
            OUTPUT_NAME="${{ matrix.build.name }}"
          fi
          
          # Build with fyne package command
          if [ "${{ matrix.build.goos }}" = "windows" ]; then
            fyne package -os windows -name "$OUTPUT_NAME" .
          elif [ "${{ matrix.build.goos }}" = "darwin" ]; then
            fyne package -os darwin -name "${{ matrix.build.name }}.app" .
          else
            fyne package -os linux -name "$OUTPUT_NAME" .
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.name }}-${{ matrix.build.goos }}-${{ matrix.build.goarch }}
          path: |
            ${{ matrix.build.name }}*

  build-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build ARM64 Linux in Docker
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            golang:1.21 \
            bash -c "
              apt-get update && \
              apt-get install -y gcc libgl1-mesa-dev xorg-dev libxkbcommon-dev && \
              go install fyne.io/tools/cmd/fyne@latest && \
              go mod download && \
              CGO_ENABLED=1 fyne package -os linux -name gogallery-arm64 .
            "

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gogallery-linux-arm64
          path: gogallery-arm64
